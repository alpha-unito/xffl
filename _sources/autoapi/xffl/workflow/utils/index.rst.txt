xffl.workflow.utils
===================

.. py:module:: xffl.workflow.utils

.. autoapi-nested-parse::

   Utility methods for the workflow configuration creation



Attributes
----------

.. autoapisummary::

   xffl.workflow.utils.logger
   xffl.workflow.utils.CWL_TYPE_MAPPING


Functions
---------

.. autoapisummary::

   xffl.workflow.utils.from_args_to_cwl
   xffl.workflow.utils.import_from_path


Module Contents
---------------

.. py:data:: logger
   :type:  logging.Logger

.. py:data:: CWL_TYPE_MAPPING
   :type:  Final[types.MappingProxyType[Any, str]]

   An immutable dictionary mapping Python to CWL types


.. py:function:: from_args_to_cwl(parser: argparse.ArgumentParser, arguments: List[str]) -> Tuple[MutableMapping[str, Any], MutableMapping[str, str], MutableMapping[str, Any]]

   Converts a Python ArgumentParser into valid dictionaries of CWL inputs entries

   :param parser: Python command line argument parser
   :type parser: argparse.ArgumentParser
   :param arguments: Command line arguments
   :type arguments: List[str]
   :raises (argparse.ArgumentError, argparse.ArgumentTypeError): Argument parsing exceptions
   :return: Three dictionaries with the arguments name as keys and different values: CWL input bidding, CWL type, CWL value
   :rtype: Tuple[MutableMapping[str, Any], MutableMapping[str, str], MutableMapping[str, Any]]


.. py:function:: import_from_path(module_name: str, file_path: xffl.custom.types.FileLike) -> types.ModuleType

   Dynamically import a module from a file

   :param module_name: Name of the module to be imported
   :type module_name: str
   :param file_path: Absolute path to the file containing the module
   :type file_path: FileLike
   :return: Imported Python module
   :rtype: types.ModuleType


