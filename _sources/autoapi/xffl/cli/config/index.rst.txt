xffl.cli.config
===============

.. py:module:: xffl.cli.config

.. autoapi-nested-parse::

   Guided configuration files creation for xFFL.

   This script guides the user in the creation of the StreamFlow and CWL
   configuration files necessary to run xFFL workloads across different HPCs.



Attributes
----------

.. autoapisummary::

   xffl.cli.config.logger


Functions
---------

.. autoapisummary::

   xffl.cli.config._get_training_info
   xffl.cli.config._get_model_info
   xffl.cli.config._configure_facility
   xffl.cli.config._write_output_files
   xffl.cli.config.config
   xffl.cli.config.main


Module Contents
---------------

.. py:data:: logger
   :type:  logging.Logger

   Default xFFL logger


.. py:function:: _get_training_info() -> Tuple[xffl.custom.types.FileLike, xffl.custom.types.FileLike, str]

   Prompt user for training script path, parser path and parser name.


.. py:function:: _get_model_info() -> Tuple[xffl.custom.types.PathLike, str]

   Prompt user for model path and new model name.


.. py:function:: _configure_facility(facility: str, parser_name: str, parser_path: xffl.custom.types.FileLike, args: argparse.Namespace, streamflow_config: xffl.workflow.templates.streamflow.StreamFlowFile, main_cwl: xffl.workflow.templates.cwl.MainWorkflow, round_cwl: xffl.workflow.templates.cwl.RoundWorkflow, cwl_config: xffl.workflow.templates.cwl.CWLConfig) -> None

   Configure a single facility interactively.

   NOTE: re-imports the user parser on purpose.


.. py:function:: _write_output_files(workdir: xffl.custom.types.FolderLike, streamflow_config: xffl.workflow.templates.streamflow.StreamFlowFile, cwl_config: xffl.workflow.templates.cwl.CWLConfig, main_cwl: xffl.workflow.templates.cwl.MainWorkflow, round_cwl: xffl.workflow.templates.cwl.RoundWorkflow, aggregate_cwl: xffl.workflow.templates.cwl.AggregateStep, training_cwl: xffl.workflow.templates.cwl.TrainingStep) -> None

   Write StreamFlow, CWL and config files to disk.


.. py:function:: config(args: argparse.Namespace) -> int

   Run guided configuration for xFFL project.

   The user parser is imported twice on purpose:
     * once before facility loop to populate general training inputs (arg_to_bidding),
     * once per facility inside _configure_facility to re-import/re-evaluate arguments
       (this mirrors the original behaviour you requested).


.. py:function:: main(args: argparse.Namespace) -> int

   xFFL project's guided configuration entrypoint.


