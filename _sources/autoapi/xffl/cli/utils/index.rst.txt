xffl.cli.utils
==============

.. py:module:: xffl.cli.utils

.. autoapi-nested-parse::

   CLI utility methods for xFFL.



Attributes
----------

.. autoapisummary::

   xffl.cli.utils.logger


Functions
---------

.. autoapisummary::

   xffl.cli.utils.get_facilitator_path
   xffl.cli.utils.check_default_value
   xffl.cli.utils.check_cli_arguments
   xffl.cli.utils.expand_paths_in_args
   xffl.cli.utils.setup_env
   xffl.cli.utils.check_and_create_dir


Module Contents
---------------

.. py:data:: logger
   :type:  logging.Logger

   Default xFFL logger


.. py:function:: get_facilitator_path() -> xffl.custom.types.FileLike

   Return the absolute path of the facilitator script.

   :return: Facilitator absolute file path.
   :rtype: FileLike


.. py:function:: check_default_value(argument_name: str, argument_value: Any, parser: argparse.ArgumentParser) -> None

   Check if a CLI argument value equals its default.

   :param argument_name: Variable name of the argument.
   :type argument_name: str
   :param argument_value: Actual value of the argument.
   :type argument_value: Any
   :param parser: Parser from which the argument originated.
   :type parser: argparse.ArgumentParser


.. py:function:: check_cli_arguments(args: argparse.Namespace, parser: argparse.ArgumentParser) -> types.SimpleNamespace

   Check CLI arguments and expand relative paths into absolute ones.

   :param args: Command line arguments.
   :type args: argparse.Namespace
   :param parser: Command line argument parser.
   :type parser: argparse.ArgumentParser
   :return: Expanded namespace with absolute paths where applicable.
   :rtype: SimpleNamespace


.. py:function:: expand_paths_in_args(args: List[str], prefix: str = '-') -> List[str]

   Expand relative paths in arguments to absolute paths.

   Used when the parser does not define a specific type.

   :param args: List of command-line arguments.
   :type args: List[str]
   :param prefix: Prefix symbol preceding a flag (default: "-").
   :type prefix: str, optional
   :return: List of command-line arguments with expanded paths.
   :rtype: List[str]


.. py:function:: setup_env(args: Dict[str, Any], mapping: Dict[str, str]) -> Dict[str, str]

   Create a mapping between CLI arguments and environment variables.

   :param args: CLI arguments.
   :type args: Dict[str, Any]
   :param mapping: Mapping between environment variables and CLI argument names.
   :type mapping: Dict[str, str]
   :return: New environment variables dictionary.
   :rtype: Dict[str, str]


.. py:function:: check_and_create_dir(dir_path: xffl.custom.types.FolderLike, folder_name: xffl.custom.types.PathLike) -> xffl.custom.types.FolderLike

   Check the base directory and create a subfolder.

   :param dir_path: Base directory path.
   :type dir_path: FolderLike
   :param folder_name: Name of the subfolder to create.
   :type folder_name: PathLike
   :raises FileNotFoundError: If the base directory path does not exist.
   :raises FileExistsError: If the target directory already exists and overwrite is denied.
   :return: Absolute path to the created (or existing) folder.
   :rtype: FolderLike


